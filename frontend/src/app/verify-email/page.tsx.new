'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { authAPI } from '@/lib/auth'

export default function VerifyEmailPage() {
  const router = useRouter()
  const [otpValue, setOtpValue] = useState('')
  const [email, setEmail] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [isVisible, setIsVisible] = useState(false)
  const [resendLoading, setResendLoading] = useState(false)
  const [countdown, setCountdown] = useState(60)
  const [canResend, setCanResend] = useState(false)

  useEffect(() => {
    setIsVisible(true)
    // Get email from session storage
    const storedEmail = sessionStorage.getItem('verification_email')
    if (!storedEmail) {
      router.push('/sign-up')
      return
    }
    setEmail(storedEmail)

    // Start countdown timer
    const timer = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          setCanResend(true)
          clearInterval(timer)
          return 0
        }
        return prev - 1
      })
    }, 1000)

    return () => clearInterval(timer)
  }, [router])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (otpValue.length !== 6) {
      setError('Please enter the complete 6-digit OTP')
      return
    }

    setIsLoading(true)
    setError('')
    
    try {
      console.log('🔄 Submitting email verification...')
      
      // Call the verify email API
      const result = await authAPI.verifyEmail({
        email: email,
        otp: otpValue
      })

      console.log('📋 Email verification result:', result)

      if (result.success && result.token) {
        alert('✅ Email verified successfully!')
        // Redirect to home page after successful verification
        router.push('/home')
      } else {
        const errorMessage = result.message || 'Invalid OTP. Please try again.'
        console.error('Email verification failed:', errorMessage)
        setError(errorMessage)
      }
      
    } catch (error) {
      console.error('❌ Email verification error:', error)
      setError('Failed to verify email. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleResendOtp = async () => {
    setResendLoading(true)
    setError('')
    
    try {
      const result = await authAPI.sendEmailVerification({ email })
      
      if (result.success) {
        alert('✅ New verification code sent to your email!')
        setOtpValue('')
        setCountdown(60)
        setCanResend(false)
        
        // Restart countdown
        const timer = setInterval(() => {
          setCountdown((prev) => {
            if (prev <= 1) {
              setCanResend(true)
              clearInterval(timer)
              return 0
            }
            return prev - 1
          })
        }, 1000)
      } else {
        setError(result.message || 'Failed to resend verification code')
      }
    } catch (error) {
      console.error('❌ Resend verification code error:', error)
      setError('Failed to resend verification code. Please try again.')
    } finally {
      setResendLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-4 -left-4 w-72 h-72 bg-gradient-to-br from-blue-200 to-purple-200 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"></div>
        <div className="absolute -top-4 -right-4 w-72 h-72 bg-gradient-to-br from-yellow-200 to-pink-200 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"></div>
        <div className="absolute -bottom-8 left-20 w-72 h-72 bg-gradient-to-br from-pink-200 to-red-200 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"></div>
      </div>

      {/* Back to Sign Up */}
      <div className="absolute top-6 left-6 z-20">
        <Link 
          href="/sign-up" 
          className="flex items-center space-x-2 text-gray-600 hover:text-blue-600 transition-all duration-300 transform hover:scale-105"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          <span className="font-medium">Back</span>
        </Link>
      </div>

      <div className="relative z-10 flex items-center justify-center min-h-screen py-12 px-4 sm:px-6 lg:px-8">
        <div className={`max-w-md w-full space-y-8 transform transition-all duration-1000 ${
          isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'
        }`}>
          {/* Header */}
          <div className="text-center transform transition-all duration-700 delay-200">
            <div className="inline-block p-3 bg-gradient-to-r from-green-500 to-blue-600 rounded-full mb-4 animate-pulse-slow">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-2 animate-gradient">
              SafeRoute
            </h1>
            <h2 className="text-2xl font-semibold text-gray-700 mb-2">Verify Your Email</h2>
            <p className="text-gray-600">
              Enter the 6-digit code sent to <span className="font-semibold text-blue-600">{email}</span>
            </p>
          </div>

          {/* OTP Verification Form */}
          <div className="bg-white/80 backdrop-blur-lg py-8 px-6 shadow-2xl rounded-2xl border border-white/20">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* OTP Input Field */}
              <div>
                <label htmlFor="otp" className="block text-sm font-medium text-gray-700 mb-2">
                  Verification Code
                </label>
                <input
                  id="otp"
                  type="text"
                  value={otpValue}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^0-9]/g, '');
                    if (value.length <= 6) {
                      setOtpValue(value);
                      setError('');
                    }
                  }}
                  maxLength={6}
                  placeholder="Enter 6-digit code"
                  className="w-full py-3 px-4 text-center text-xl font-bold border-2 border-gray-300 rounded-lg bg-white/50 focus:border-blue-500 focus:ring-2 focus:ring-blue-300 focus:outline-none"
                  autoComplete="off"
                />
              </div>

              {/* Error Message */}
              {error && (
                <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 rounded-md text-sm">
                  <p>{error}</p>
                </div>
              )}

              {/* Submit Button */}
              <div>
                <button
                  type="submit"
                  disabled={isLoading}
                  className="w-full py-3 px-4 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-md hover:shadow-lg hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 flex justify-center"
                >
                  {isLoading ? (
                    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  ) : (
                    'Verify Email'
                  )}
                </button>
              </div>
            </form>

            {/* Resend OTP */}
            <div className="mt-6 text-center">
              <p className="text-gray-600 text-sm mb-2">
                Didn't receive the code?
              </p>
              {canResend ? (
                <button
                  onClick={handleResendOtp}
                  disabled={resendLoading}
                  className="inline-flex items-center justify-center text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors"
                >
                  {resendLoading ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Sending...
                    </>
                  ) : (
                    'Resend verification code'
                  )}
                </button>
              ) : (
                <p className="text-sm text-gray-500">
                  Resend code in <span className="font-semibold text-blue-600">{countdown}</span> seconds
                </p>
              )}
            </div>
          </div>
          
          {/* Help text */}
          <div className="text-center text-gray-500 text-sm">
            <p>Please check your spam folder if you don't see the email.</p>
            <p className="mt-2">
              <Link href="/login" className="text-blue-600 hover:text-blue-800 font-medium">
                Already verified? Log in
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
